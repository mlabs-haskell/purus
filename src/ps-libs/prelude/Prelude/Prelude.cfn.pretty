Prelude (tests/purus/passing/prelude/Prelude.purs)

Imported Modules: 
------------------------------
  Builtin,
  Prelude,
  Prim

Exports: 
------------------------------
  serializeScriptHash,
  deserializeScriptHash,
  serializeRedeemer,
  deserializeRedeemer,
  serializeRedeemerHash,
  deserializeRedeemerHash,
  serializeDatum,
  deserializeDatum,
  serializeDatumHash,
  deserializeDatumHash,
  serializeInt,
  deserializeInt,
  serializeByteString,
  deserializeByteString,
  serializeList,
  deserializeList,
  serializeTuple2,
  deserializeTuple2,
  serializeMaybe,
  deserializeMaybe,
  maybe,
  fromMaybe,
  identity,
  const,
  and,
  or,
  not,
  xor,
  mapList,
  filterList,
  takeList,
  dropList,
  zipWithList,
  appendList,
  lengthList,
  anyList,
  allList,
  sumList,
  productList,
  apply,
  flip

Re-Exports: 
------------------------------
  

Foreign: 
------------------------------
  

Datatypes: 
------------------------------



Declarations: 
------------------------------
zipWithList :: forall (a :: Prim.Type) (b :: Prim.Type) (c :: Prim.Type). (((a :: Prim.Type) -> (((b :: Prim.Type) -> ((c :: Prim.Type))))) -> ((List ((a :: Prim.Type)) -> ((List ((b :: Prim.Type)) -> (List ((c :: Prim.Type))))))))
zipWithList = 
  \(f: ((a :: Prim.Type) -> (((b :: Prim.Type) -> ((c :: Prim.Type)))))) -> 
    \(ell1: List ((a :: Prim.Type))) -> 
      \(ell2: List ((b :: Prim.Type))) -> 
        case (ell1: List ((a :: Prim.Type))) of 
           Nil -> (Nil: List ((c :: Prim.Type)))
           Cons x xs -> 
             case (ell2: List ((b :: Prim.Type))) of 
                Nil -> (Nil: List ((c :: Prim.Type)))
                Cons y ys -> 
                  (Cons: forall (x :: Prim.Type). ((x :: Prim.Type) ->
                  ((List ((x :: Prim.Type)) -> (List ((x :: Prim.Type)))))))
                  ((f: ((a :: Prim.Type) ->
                   (((b :: Prim.Type) -> ((c :: Prim.Type))))))
                   (x: (a :: Prim.Type))
                   (y: (b :: Prim.Type)))
                  ((zipWithList: forall (a :: Prim.Type)
                   (b :: Prim.Type)
                   (c :: Prim.Type). (((a :: Prim.Type) ->
                   (((b :: Prim.Type) -> ((c :: Prim.Type))))) ->
                   ((List ((a :: Prim.Type)) ->
                   ((List ((b :: Prim.Type)) -> (List ((c :: Prim.Type)))))))))
                   (f: ((a :: Prim.Type) ->
                   (((b :: Prim.Type) -> ((c :: Prim.Type))))))
                   (xs: List ((a :: Prim.Type)))
                   (ys: List ((b :: Prim.Type))))

takeList :: forall (a :: Prim.Type). (Prim.Int -> ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type))))))
takeList = 
  \(count: Prim.Int) -> 
    \(ell: List ((a :: Prim.Type))) -> 
      case ((lessThanEqualsInteger: (Prim.Int -> ((Prim.Int -> (Prim.Boolean))))) (count: Prim.Int) (0: Prim.Int)) of 
         True -> (Nil: List ((a :: Prim.Type)))
         _ -> 
           case (ell: List ((a :: Prim.Type))) of 
              Nil -> (Nil: List ((a :: Prim.Type)))
              Cons x xs -> 
                (Cons: forall (x :: Prim.Type). ((x :: Prim.Type) ->
                ((List ((x :: Prim.Type)) -> (List ((x :: Prim.Type)))))))
                (x: (a :: Prim.Type))
                ((takeList: forall (a :: Prim.Type). (Prim.Int ->
                 ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type)))))))
                 ((subtractInteger: (Prim.Int -> ((Prim.Int -> (Prim.Int)))))
                  (count: Prim.Int)
                  (1: Prim.Int))
                 (xs: List ((a :: Prim.Type))))

sumList :: (List (Prim.Int) -> (Prim.Int))
sumList = 
  \(ell: List (Prim.Int)) -> 
    case (ell: List (Prim.Int)) of 
       Nil -> (0: Prim.Int)
       Cons x xs -> 
         (addInteger: (Prim.Int -> ((Prim.Int -> (Prim.Int)))))
         (x: Prim.Int)
         ((sumList: (List (Prim.Int) -> (Prim.Int))) (xs: List (Prim.Int)))

serializeTuple2 :: forall (a :: Prim.Type) (b :: Prim.Type). (((a :: Prim.Type) -> (Builtin.BuiltinData)) -> ((((b :: Prim.Type) -> (Builtin.BuiltinData)) -> ((((Prim.Tuple2 ((a :: Prim.Type))) ((b :: Prim.Type))) -> (Builtin.BuiltinData))))))
serializeTuple2 = 
  \(fA: ((a :: Prim.Type) -> (Builtin.BuiltinData))) -> 
    \(fB: ((b :: Prim.Type) -> (Builtin.BuiltinData))) -> 
      \(v: ((Prim.Tuple2 ((a :: Prim.Type))) ((b :: Prim.Type)))) -> 
        case (fA: ((a :: Prim.Type) -> (Builtin.BuiltinData))) (fB: ((b :: Prim.Type) -> (Builtin.BuiltinData))) (v: ((Prim.Tuple2 ((a :: Prim.Type))) ((b :: Prim.Type)))) of 
           fA1 fB1 Tuple2 x y -> 
             (constrData: (Prim.Int ->
             (((Builtin.BuiltinList (Builtin.BuiltinData)) ->
             (Builtin.BuiltinData)))))
             (0: Prim.Int)
             ((mkCons: forall (a :: Prim.Type). ((a :: Prim.Type) ->
              (((Builtin.BuiltinList ((a :: Prim.Type))) ->
              ((Builtin.BuiltinList ((a :: Prim.Type))))))))
              ((fA1: ((a :: Prim.Type) -> (Builtin.BuiltinData)))
               (x: (a :: Prim.Type)))
              ((mkCons: forall (a :: Prim.Type). ((a :: Prim.Type) ->
               (((Builtin.BuiltinList ((a :: Prim.Type))) ->
               ((Builtin.BuiltinList ((a :: Prim.Type))))))))
               ((fB1: ((b :: Prim.Type) -> (Builtin.BuiltinData)))
                (y: (b :: Prim.Type)))
               ((mkNilData: (Prim.Unit ->
                ((Builtin.BuiltinList (Builtin.BuiltinData)))))
                (unit: Prim.Unit))))

serializeRedeemer :: (Prim.Redeemer -> (Builtin.BuiltinData))
serializeRedeemer = 
  \(v: Prim.Redeemer) -> 
    case (v: Prim.Redeemer) of 
       Redeemer dat -> (dat: Builtin.BuiltinData)

serializeMaybe :: forall (a :: Prim.Type). (((a :: Prim.Type) -> (Builtin.BuiltinData)) -> (((Prim.Maybe ((a :: Prim.Type))) -> (Builtin.BuiltinData))))
serializeMaybe = 
  \(f: ((a :: Prim.Type) -> (Builtin.BuiltinData))) -> 
    \(m: (Prim.Maybe ((a :: Prim.Type)))) -> 
      case (m: (Prim.Maybe ((a :: Prim.Type)))) of 
         Nothing -> 
           (constrData: (Prim.Int ->
           (((Builtin.BuiltinList (Builtin.BuiltinData)) ->
           (Builtin.BuiltinData)))))
           (0: Prim.Int)
           ((mkNilData: (Prim.Unit ->
            ((Builtin.BuiltinList (Builtin.BuiltinData)))))
            (unit: Prim.Unit))
         Just x -> 
           (constrData: (Prim.Int ->
           (((Builtin.BuiltinList (Builtin.BuiltinData)) ->
           (Builtin.BuiltinData)))))
           (1: Prim.Int)
           ((mkCons: forall (a :: Prim.Type). ((a :: Prim.Type) ->
            (((Builtin.BuiltinList ((a :: Prim.Type))) ->
            ((Builtin.BuiltinList ((a :: Prim.Type))))))))
            ((f: ((a :: Prim.Type) -> (Builtin.BuiltinData)))
             (x: (a :: Prim.Type)))
            ((mkNilData: (Prim.Unit ->
             ((Builtin.BuiltinList (Builtin.BuiltinData)))))
             (unit: Prim.Unit)))

serializeList :: forall (a :: Prim.Type). (((a :: Prim.Type) -> (Builtin.BuiltinData)) -> ((List ((a :: Prim.Type)) -> (Builtin.BuiltinData))))
serializeList = 
  \(f: ((a :: Prim.Type) -> (Builtin.BuiltinData))) -> 
    \(arr: List ((a :: Prim.Type))) -> 
      let
        go :: (List (a*7) -> ((Builtin.BuiltinList (Builtin.BuiltinData))))
        go = 
          \(v: List (a*7)) -> 
            case (v: List (a*7)) of 
               Nil -> 
                 (mkNilData: (Prim.Unit ->
                 ((Builtin.BuiltinList (Builtin.BuiltinData)))))
                 (unit: Prim.Unit)
               Cons x xs -> 
                 (mkCons: forall (a :: Prim.Type). ((a :: Prim.Type) ->
                 (((Builtin.BuiltinList ((a :: Prim.Type))) ->
                 ((Builtin.BuiltinList ((a :: Prim.Type))))))))
                 ((f: ((a :: Prim.Type) -> (Builtin.BuiltinData))) (x: a*7))
                 ((go: (List (a*7) ->
                  ((Builtin.BuiltinList (Builtin.BuiltinData)))))
                  (xs: List (a*7)))
      in (listData: ((Builtin.BuiltinList (Builtin.BuiltinData)) ->
         (Builtin.BuiltinData)))
         ((go: (List (a*7) -> ((Builtin.BuiltinList (Builtin.BuiltinData)))))
          (arr: List ((a :: Prim.Type))))

serializeInt :: (Prim.Int -> (Builtin.BuiltinData))
serializeInt = (iData: (Prim.Int -> (Builtin.BuiltinData)))

serializeDatum :: (Prim.Datum -> (Builtin.BuiltinData))
serializeDatum = 
  \(v: Prim.Datum) -> 
    case (v: Prim.Datum) of 
       Datum dat -> (dat: Builtin.BuiltinData)

serializeByteString :: (Builtin.BuiltinByteString -> (Builtin.BuiltinData))
serializeByteString = 
  (bData: (Builtin.BuiltinByteString -> (Builtin.BuiltinData)))

serializeDatumHash :: (Prim.DatumHash -> (Builtin.BuiltinData))
serializeDatumHash = 
  \(v: Prim.DatumHash) -> 
    case (v: Prim.DatumHash) of 
       DatumHash bs -> 
         (serializeByteString: (Builtin.BuiltinByteString ->
         (Builtin.BuiltinData)))
         (bs: Builtin.BuiltinByteString)

serializeRedeemerHash :: (Prim.RedeemerHash -> (Builtin.BuiltinData))
serializeRedeemerHash = 
  \(v: Prim.RedeemerHash) -> 
    case (v: Prim.RedeemerHash) of 
       RedeemerHash bs -> 
         (serializeByteString: (Builtin.BuiltinByteString ->
         (Builtin.BuiltinData)))
         (bs: Builtin.BuiltinByteString)

serializeScriptHash :: (Prim.ScriptHash -> (Builtin.BuiltinData))
serializeScriptHash = 
  \(v: Prim.ScriptHash) -> 
    case (v: Prim.ScriptHash) of 
       ScriptHash dat -> 
         (serializeByteString: (Builtin.BuiltinByteString ->
         (Builtin.BuiltinData)))
         (dat: Builtin.BuiltinByteString)

productList :: (List (Prim.Int) -> (Prim.Int))
productList = 
  \(ell: List (Prim.Int)) -> 
    case (ell: List (Prim.Int)) of 
       Nil -> (1: Prim.Int)
       Cons x xs -> 
         (multiplyInteger: (Prim.Int -> ((Prim.Int -> (Prim.Int)))))
         (x: Prim.Int)
         ((productList: (List (Prim.Int) -> (Prim.Int))) (xs: List (Prim.Int)))

or :: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean))))
or = 
  \(x: Prim.Boolean) -> 
    \(y: Prim.Boolean) -> 
      (ifThenElse: forall (x :: Prim.Type). (Prim.Boolean ->
      (((x :: Prim.Type) -> (((x :: Prim.Type) -> ((x :: Prim.Type))))))))
      (x: Prim.Boolean)
      (True: Prim.Boolean)
      (y: Prim.Boolean)

not :: (Prim.Boolean -> (Prim.Boolean))
not = 
  \(x: Prim.Boolean) -> 
    (ifThenElse: forall (x :: Prim.Type). (Prim.Boolean ->
    (((x :: Prim.Type) -> (((x :: Prim.Type) -> ((x :: Prim.Type))))))))
    (x: Prim.Boolean)
    (False: Prim.Boolean)
    (True: Prim.Boolean)

xor :: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean))))
xor = 
  \(x: Prim.Boolean) -> 
    \(y: Prim.Boolean) -> 
      (ifThenElse: forall (x :: Prim.Type). (Prim.Boolean ->
      (((x :: Prim.Type) -> (((x :: Prim.Type) -> ((x :: Prim.Type))))))))
      (x: Prim.Boolean)
      ((not: (Prim.Boolean -> (Prim.Boolean))) (y: Prim.Boolean))
      (y: Prim.Boolean)

maybe :: forall (a :: Prim.Type) (b :: Prim.Type). ((b :: Prim.Type) -> ((((a :: Prim.Type) -> ((b :: Prim.Type))) -> (((Prim.Maybe ((a :: Prim.Type))) -> ((b :: Prim.Type)))))))
maybe = 
  \(whenNothing: (b :: Prim.Type)) -> 
    \(whenJust: ((a :: Prim.Type) -> ((b :: Prim.Type)))) -> 
      \(m: (Prim.Maybe ((a :: Prim.Type)))) -> 
        case (m: (Prim.Maybe ((a :: Prim.Type)))) of 
           Nothing -> (whenNothing: (b :: Prim.Type))
           Just x -> 
             (whenJust: ((a :: Prim.Type) -> ((b :: Prim.Type))))
             (x: (a :: Prim.Type))

mapList :: forall (a :: Prim.Type) (b :: Prim.Type). (((a :: Prim.Type) -> ((b :: Prim.Type))) -> ((List ((a :: Prim.Type)) -> (List ((b :: Prim.Type))))))
mapList = 
  \(f: ((a :: Prim.Type) -> ((b :: Prim.Type)))) -> 
    \(ell: List ((a :: Prim.Type))) -> 
      case (ell: List ((a :: Prim.Type))) of 
         Nil -> (Nil: List ((b :: Prim.Type)))
         Cons x xs -> 
           (Cons: forall (x :: Prim.Type). ((x :: Prim.Type) ->
           ((List ((x :: Prim.Type)) -> (List ((x :: Prim.Type)))))))
           ((f: ((a :: Prim.Type) -> ((b :: Prim.Type)))) (x: (a :: Prim.Type)))
           ((mapList: forall (a :: Prim.Type)
            (b :: Prim.Type). (((a :: Prim.Type) -> ((b :: Prim.Type))) ->
            ((List ((a :: Prim.Type)) -> (List ((b :: Prim.Type)))))))
            (f: ((a :: Prim.Type) -> ((b :: Prim.Type))))
            (xs: List ((a :: Prim.Type))))

lengthList :: forall (a :: Prim.Type). (List ((a :: Prim.Type)) -> (Prim.Int))
lengthList = 
  \(ell: List ((a :: Prim.Type))) -> 
    case (ell: List ((a :: Prim.Type))) of 
       Nil -> (0: Prim.Int)
       Cons _ xs -> 
         (addInteger: (Prim.Int -> ((Prim.Int -> (Prim.Int)))))
         (1: Prim.Int)
         ((lengthList: forall (a :: Prim.Type). (List ((a :: Prim.Type)) ->
          (Prim.Int)))
          (xs: List ((a :: Prim.Type))))

identity :: forall (a :: Prim.Type). ((a :: Prim.Type) -> ((a :: Prim.Type)))
identity = \(x: (a :: Prim.Type)) -> (x: (a :: Prim.Type))

fromMaybe :: forall (a :: Prim.Type). ((a :: Prim.Type) -> (((Prim.Maybe ((a :: Prim.Type))) -> ((a :: Prim.Type)))))
fromMaybe = 
  \(whenNothing: (a :: Prim.Type)) -> 
    \(m: (Prim.Maybe ((a :: Prim.Type)))) -> 
      case (m: (Prim.Maybe ((a :: Prim.Type)))) of 
         Nothing -> (whenNothing: (a :: Prim.Type))
         Just x -> (x: (a :: Prim.Type))

flip :: forall (a :: Prim.Type) (b :: Prim.Type) (c :: Prim.Type). (((a :: Prim.Type) -> (((b :: Prim.Type) -> ((c :: Prim.Type))))) -> (((b :: Prim.Type) -> (((a :: Prim.Type) -> ((c :: Prim.Type)))))))
flip = 
  \(f: ((a :: Prim.Type) -> (((b :: Prim.Type) -> ((c :: Prim.Type)))))) -> 
    \(x: (b :: Prim.Type)) -> 
      \(y: (a :: Prim.Type)) -> 
        (f: ((a :: Prim.Type) -> (((b :: Prim.Type) -> ((c :: Prim.Type))))))
        (y: (a :: Prim.Type))
        (x: (b :: Prim.Type))

filterList :: forall (a :: Prim.Type). (((a :: Prim.Type) -> (Prim.Boolean)) -> ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type))))))
filterList = 
  \(f: ((a :: Prim.Type) -> (Prim.Boolean))) -> 
    \(ell: List ((a :: Prim.Type))) -> 
      case (ell: List ((a :: Prim.Type))) of 
         Nil -> (Nil: List ((a :: Prim.Type)))
         Cons x xs -> 
           case ((f: ((a :: Prim.Type) -> (Prim.Boolean))) (x: (a :: Prim.Type))) of 
              True -> 
                (Cons: forall (x :: Prim.Type). ((x :: Prim.Type) ->
                ((List ((x :: Prim.Type)) -> (List ((x :: Prim.Type)))))))
                (x: (a :: Prim.Type))
                ((filterList: forall (a :: Prim.Type). (((a :: Prim.Type) ->
                 (Prim.Boolean)) ->
                 ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type)))))))
                 (f: ((a :: Prim.Type) -> (Prim.Boolean)))
                 (xs: List ((a :: Prim.Type))))
              _ -> 
                (filterList: forall (a :: Prim.Type). (((a :: Prim.Type) ->
                (Prim.Boolean)) ->
                ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type)))))))
                (f: ((a :: Prim.Type) -> (Prim.Boolean)))
                (xs: List ((a :: Prim.Type)))

dropList :: forall (a :: Prim.Type). (Prim.Int -> ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type))))))
dropList = 
  \(count: Prim.Int) -> 
    \(ell: List ((a :: Prim.Type))) -> 
      case ((lessThanEqualsInteger: (Prim.Int -> ((Prim.Int -> (Prim.Boolean))))) (count: Prim.Int) (0: Prim.Int)) of 
         True -> (ell: List ((a :: Prim.Type)))
         _ -> 
           case (ell: List ((a :: Prim.Type))) of 
              Nil -> (Nil: List ((a :: Prim.Type)))
              Cons _ xs -> 
                (dropList: forall (a :: Prim.Type). (Prim.Int ->
                ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type)))))))
                ((subtractInteger: (Prim.Int -> ((Prim.Int -> (Prim.Int)))))
                 (count: Prim.Int)
                 (1: Prim.Int))
                (xs: List ((a :: Prim.Type)))

deserializeTuple2 :: forall (a :: Prim.Type) (b :: Prim.Type). ((Builtin.BuiltinData -> ((a :: Prim.Type))) -> (((Builtin.BuiltinData -> ((b :: Prim.Type))) -> ((Builtin.BuiltinData -> (((Prim.Tuple2 ((a :: Prim.Type))) ((b :: Prim.Type)))))))))
deserializeTuple2 = 
  \(fA: (Builtin.BuiltinData -> ((a :: Prim.Type)))) -> 
    \(fB: (Builtin.BuiltinData -> ((b :: Prim.Type)))) -> 
      \(dat: Builtin.BuiltinData) -> 
        let
          unlisted :: (Builtin.BuiltinList (Builtin.BuiltinData))
          unlisted = 
            (sndPair: forall (a :: Prim.Type)
            (b :: Prim.Type). (((Builtin.BuiltinPair
            ((a :: Prim.Type))) ((b :: Prim.Type))) ->
            ((b :: Prim.Type))))
            ((unConstrData: (Builtin.BuiltinData ->
             (((Builtin.BuiltinPair
             (Prim.Int)) ((Builtin.BuiltinList (Builtin.BuiltinData)))))))
             (dat: Builtin.BuiltinData))
          unlisted' :: (Builtin.BuiltinList (Builtin.BuiltinData))
          unlisted' = 
            (tailList: forall (a :: Prim.Type). ((Builtin.BuiltinList
            ((a :: Prim.Type))) ->
            ((Builtin.BuiltinList ((a :: Prim.Type))))))
            (unlisted: (Builtin.BuiltinList (Builtin.BuiltinData)))
          y :: (b :: Prim.Type)
          y = 
            (fB: (Builtin.BuiltinData -> ((b :: Prim.Type))))
            ((headList: forall (a :: Prim.Type). ((Builtin.BuiltinList
             ((a :: Prim.Type))) ->
             ((a :: Prim.Type))))
             (unlisted': (Builtin.BuiltinList (Builtin.BuiltinData))))
          x :: (a :: Prim.Type)
          x = 
            (fA: (Builtin.BuiltinData -> ((a :: Prim.Type))))
            ((headList: forall (a :: Prim.Type). ((Builtin.BuiltinList
             ((a :: Prim.Type))) ->
             ((a :: Prim.Type))))
             (unlisted: (Builtin.BuiltinList (Builtin.BuiltinData))))
        in (Tuple2: forall (t1 :: Prim.Type)
           (t2 :: Prim.Type). ((t1 :: Prim.Type) ->
           (((t2 :: Prim.Type) ->
           (((Prim.Tuple2 ((t1 :: Prim.Type))) ((t2 :: Prim.Type))))))))
           (x: a*20)
           (y: b*21)

deserializeRedeemer :: (Builtin.BuiltinData -> (Prim.Redeemer))
deserializeRedeemer = (Redeemer: (Builtin.BuiltinData -> (Prim.Redeemer)))

deserializeMaybe :: forall (a :: Prim.Type). ((Builtin.BuiltinData -> ((a :: Prim.Type))) -> ((Builtin.BuiltinData -> ((Prim.Maybe ((a :: Prim.Type)))))))
deserializeMaybe = 
  \(f: (Builtin.BuiltinData -> ((a :: Prim.Type)))) -> 
    \(dat: Builtin.BuiltinData) -> 
      let
        p :: ((Builtin.BuiltinPair (Prim.Int)) ((Builtin.BuiltinList (Builtin.BuiltinData))))
        p = 
          (unConstrData: (Builtin.BuiltinData ->
          (((Builtin.BuiltinPair
          (Prim.Int)) ((Builtin.BuiltinList (Builtin.BuiltinData)))))))
          (dat: Builtin.BuiltinData)
        tag :: Prim.Int
        tag = 
          (fstPair: forall (a :: Prim.Type)
          (b :: Prim.Type). (((Builtin.BuiltinPair
          ((a :: Prim.Type))) ((b :: Prim.Type))) ->
          ((a :: Prim.Type))))
          (p: ((Builtin.BuiltinPair
          (Prim.Int)) ((Builtin.BuiltinList (Builtin.BuiltinData)))))
      in case ((equalsInteger: (Prim.Int -> ((Prim.Int -> (Prim.Boolean))))) (tag: Prim.Int) (0: Prim.Int)) of 
            True -> (Nothing: (Prim.Maybe (a*22)))
            _ -> 
              let
                unlisted :: (Builtin.BuiltinList (Builtin.BuiltinData))
                unlisted = 
                  (sndPair: forall (a :: Prim.Type)
                  (b :: Prim.Type). (((Builtin.BuiltinPair
                  ((a :: Prim.Type))) ((b :: Prim.Type))) ->
                  ((b :: Prim.Type))))
                  (p: ((Builtin.BuiltinPair
                  (Prim.Int)) ((Builtin.BuiltinList (Builtin.BuiltinData)))))
              in (Just: forall (a :: Prim.Type). ((a :: Prim.Type) ->
                 ((Prim.Maybe ((a :: Prim.Type))))))
                 ((f: (Builtin.BuiltinData -> ((a :: Prim.Type))))
                  ((headList: forall (a :: Prim.Type). ((Builtin.BuiltinList
                   ((a :: Prim.Type))) ->
                   ((a :: Prim.Type))))
                   (unlisted: (Builtin.BuiltinList (Builtin.BuiltinData)))))

deserializeList :: forall (a :: Prim.Type). ((Builtin.BuiltinData -> ((a :: Prim.Type))) -> ((Builtin.BuiltinData -> (List ((a :: Prim.Type))))))
deserializeList = 
  \(f: (Builtin.BuiltinData -> ((a :: Prim.Type)))) -> 
    \(dat: Builtin.BuiltinData) -> 
      let
        go :: ((Builtin.BuiltinList (Builtin.BuiltinData)) -> (List (a*23)))
        go = 
          \(ell: (Builtin.BuiltinList (Builtin.BuiltinData))) -> 
            case ((nullList: forall (a :: Prim.Type). ((Builtin.BuiltinList ((a :: Prim.Type))) -> (Prim.Boolean))) (ell: (Builtin.BuiltinList (Builtin.BuiltinData)))) of 
               True -> (Nil: List (a*23))
               _ -> 
                 let
                   t :: (Builtin.BuiltinList (Builtin.BuiltinData))
                   t = 
                     (tailList: forall (a :: Prim.Type). ((Builtin.BuiltinList
                     ((a :: Prim.Type))) ->
                     ((Builtin.BuiltinList ((a :: Prim.Type))))))
                     (ell: (Builtin.BuiltinList (Builtin.BuiltinData)))
                   h :: Builtin.BuiltinData
                   h = 
                     (headList: forall (a :: Prim.Type). ((Builtin.BuiltinList
                     ((a :: Prim.Type))) ->
                     ((a :: Prim.Type))))
                     (ell: (Builtin.BuiltinList (Builtin.BuiltinData)))
                 in (Cons: forall (x :: Prim.Type). ((x :: Prim.Type) ->
                    ((List ((x :: Prim.Type)) -> (List ((x :: Prim.Type)))))))
                    ((f: (Builtin.BuiltinData -> ((a :: Prim.Type))))
                     (h: Builtin.BuiltinData))
                    ((go: ((Builtin.BuiltinList (Builtin.BuiltinData)) ->
                     (List (a*23))))
                     (t: (Builtin.BuiltinList (Builtin.BuiltinData))))
      in let
           unlisted :: (Builtin.BuiltinList (Builtin.BuiltinData))
           unlisted = 
             (unListData: (Builtin.BuiltinData ->
             ((Builtin.BuiltinList (Builtin.BuiltinData)))))
             (dat: Builtin.BuiltinData)
         in (go: ((Builtin.BuiltinList (Builtin.BuiltinData)) -> (List (a*23))))
            (unlisted: (Builtin.BuiltinList (Builtin.BuiltinData)))

deserializeInt :: (Builtin.BuiltinData -> (Prim.Int))
deserializeInt = (unIData: (Builtin.BuiltinData -> (Prim.Int)))

deserializeDatum :: (Builtin.BuiltinData -> (Prim.Datum))
deserializeDatum = (Datum: (Builtin.BuiltinData -> (Prim.Datum)))

deserializeByteString :: (Builtin.BuiltinData -> (Builtin.BuiltinByteString))
deserializeByteString = 
  (unBData: (Builtin.BuiltinData -> (Builtin.BuiltinByteString)))

deserializeDatumHash :: (Builtin.BuiltinData -> (Prim.DatumHash))
deserializeDatumHash = 
  \(dat: Builtin.BuiltinData) -> 
    (DatumHash: (Builtin.BuiltinByteString -> (Prim.DatumHash)))
    ((deserializeByteString: (Builtin.BuiltinData ->
     (Builtin.BuiltinByteString)))
     (dat: Builtin.BuiltinData))

deserializeRedeemerHash :: (Builtin.BuiltinData -> (Prim.RedeemerHash))
deserializeRedeemerHash = 
  \(dat: Builtin.BuiltinData) -> 
    (RedeemerHash: (Builtin.BuiltinByteString -> (Prim.RedeemerHash)))
    ((deserializeByteString: (Builtin.BuiltinData ->
     (Builtin.BuiltinByteString)))
     (dat: Builtin.BuiltinData))

deserializeScriptHash :: (Builtin.BuiltinData -> (Prim.ScriptHash))
deserializeScriptHash = 
  \(dat: Builtin.BuiltinData) -> 
    (ScriptHash: (Builtin.BuiltinByteString -> (Prim.ScriptHash)))
    ((deserializeByteString: (Builtin.BuiltinData ->
     (Builtin.BuiltinByteString)))
     (dat: Builtin.BuiltinData))

const :: forall (a :: Prim.Type) (b :: Prim.Type). ((a :: Prim.Type) -> (((b :: Prim.Type) -> ((b :: Prim.Type)))))
const = 
  \(v: (a :: Prim.Type)) -> \(x: (b :: Prim.Type)) -> (x: (b :: Prim.Type))

apply :: forall (a :: Prim.Type) (b :: Prim.Type). (((a :: Prim.Type) -> ((b :: Prim.Type))) -> (((a :: Prim.Type) -> ((b :: Prim.Type)))))
apply = 
  \(f: ((a :: Prim.Type) -> ((b :: Prim.Type)))) -> 
    \(x: (a :: Prim.Type)) -> 
      (f: ((a :: Prim.Type) -> ((b :: Prim.Type)))) (x: (a :: Prim.Type))

appendList :: forall (a :: Prim.Type). (List ((a :: Prim.Type)) -> ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type))))))
appendList = 
  \(ell1: List ((a :: Prim.Type))) -> 
    \(ell2: List ((a :: Prim.Type))) -> 
      case (ell1: List ((a :: Prim.Type))) of 
         Nil -> (ell2: List ((a :: Prim.Type)))
         Cons x xs -> 
           (Cons: forall (x :: Prim.Type). ((x :: Prim.Type) ->
           ((List ((x :: Prim.Type)) -> (List ((x :: Prim.Type)))))))
           (x: (a :: Prim.Type))
           ((appendList: forall (a :: Prim.Type). (List ((a :: Prim.Type)) ->
            ((List ((a :: Prim.Type)) -> (List ((a :: Prim.Type)))))))
            (xs: List ((a :: Prim.Type)))
            (ell2: List ((a :: Prim.Type))))

anyList :: forall (a :: Prim.Type). (((a :: Prim.Type) -> (Prim.Boolean)) -> ((List ((a :: Prim.Type)) -> (Prim.Boolean))))
anyList = 
  \(p: ((a :: Prim.Type) -> (Prim.Boolean))) -> 
    \(ell: List ((a :: Prim.Type))) -> 
      case (ell: List ((a :: Prim.Type))) of 
         Nil -> (False: Prim.Boolean)
         Cons x xs -> 
           case ((p: ((a :: Prim.Type) -> (Prim.Boolean))) (x: (a :: Prim.Type))) of 
              True -> (True: Prim.Boolean)
              _ -> 
                (anyList: forall (a :: Prim.Type). (((a :: Prim.Type) ->
                (Prim.Boolean)) ->
                ((List ((a :: Prim.Type)) -> (Prim.Boolean)))))
                (p: ((a :: Prim.Type) -> (Prim.Boolean)))
                (xs: List ((a :: Prim.Type)))

and :: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean))))
and = 
  \(x: Prim.Boolean) -> 
    \(y: Prim.Boolean) -> 
      (ifThenElse: forall (x :: Prim.Type). (Prim.Boolean ->
      (((x :: Prim.Type) -> (((x :: Prim.Type) -> ((x :: Prim.Type))))))))
      (x: Prim.Boolean)
      (y: Prim.Boolean)
      (False: Prim.Boolean)

allList :: forall (a :: Prim.Type). (((a :: Prim.Type) -> (Prim.Boolean)) -> ((List ((a :: Prim.Type)) -> (Prim.Boolean))))
allList = 
  \(p: ((a :: Prim.Type) -> (Prim.Boolean))) -> 
    \(ell: List ((a :: Prim.Type))) -> 
      case (ell: List ((a :: Prim.Type))) of 
         Nil -> (True: Prim.Boolean)
         Cons x xs -> 
           case ((p: ((a :: Prim.Type) -> (Prim.Boolean))) (x: (a :: Prim.Type))) of 
              True -> 
                (allList: forall (a :: Prim.Type). (((a :: Prim.Type) ->
                (Prim.Boolean)) ->
                ((List ((a :: Prim.Type)) -> (Prim.Boolean)))))
                (p: ((a :: Prim.Type) -> (Prim.Boolean)))
                (xs: List ((a :: Prim.Type)))
              _ -> (False: Prim.Boolean)