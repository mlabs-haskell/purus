Lib (tests/purus/passing/CoreFn/Misc/Lib.purs)

Imported Modules: 
------------------------------
  Builtin,
  Lib,
  Prim

Exports: 
------------------------------
  C,
  eqBool,
  equalsC

Re-Exports: 
------------------------------
  

Foreign: 
------------------------------
  

Datatypes: 
------------------------------
data C (a :: Prim.Type) (b :: Prim.Type) (c :: Prim.Type) = 
  C ((a :: Prim.Type)) ((b :: Prim.Type)) ((c :: Prim.Type))


Declarations: 
------------------------------
eqBool :: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean))))
eqBool = 
  \(v: Prim.Boolean) -> 
    \(v1: Prim.Boolean) -> 
      case (v: Prim.Boolean) (v1: Prim.Boolean) of 
         True True -> (True: Prim.Boolean)
         False False -> (True: Prim.Boolean)
         _ _ -> (False: Prim.Boolean)

equalsC :: ((((Lib.C (Prim.Int)) (Prim.String)) ((Prim.Maybe (Prim.Boolean)))) -> (((((Lib.C (Prim.Int)) (Prim.String)) ((Prim.Maybe (Prim.Boolean)))) -> (Prim.Boolean))))
equalsC = 
  \(v: (((Lib.C (Prim.Int)) (Prim.String)) ((Prim.Maybe (Prim.Boolean))))) -> 
    \(v1: (((Lib.C
      (Prim.Int)) (Prim.String)) ((Prim.Maybe (Prim.Boolean))))) -> 
      case (v: (((Lib.C (Prim.Int)) (Prim.String)) ((Prim.Maybe (Prim.Boolean))))) (v1: (((Lib.C (Prim.Int)) (Prim.String)) ((Prim.Maybe (Prim.Boolean))))) of 
         C i1 s1 Just b1 C i2 s2 Just b2 -> 
           (and: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean)))))
           ((equalsInteger: (Prim.Int -> ((Prim.Int -> (Prim.Boolean)))))
            (i1: Prim.Int)
            (i2: Prim.Int))
           ((and: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean)))))
            ((equalsString: (Prim.String -> ((Prim.String -> (Prim.Boolean)))))
             (s1: Prim.String)
             (s2: Prim.String))
            ((eqBool: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean)))))
             (b1: Prim.Boolean)
             (b2: Prim.Boolean)))
         C i1 s1 Nothing C i2 s2 Nothing -> 
           (and: (Prim.Boolean -> ((Prim.Boolean -> (Prim.Boolean)))))
           ((equalsInteger: (Prim.Int -> ((Prim.Int -> (Prim.Boolean)))))
            (i1: Prim.Int)
            (i2: Prim.Int))
           ((equalsString: (Prim.String -> ((Prim.String -> (Prim.Boolean)))))
            (s1: Prim.String)
            (s2: Prim.String))
         _ _ -> (False: Prim.Boolean)