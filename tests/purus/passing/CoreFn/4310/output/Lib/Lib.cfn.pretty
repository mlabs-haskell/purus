Lib (tests/purus/passing/CoreFn/4310/Lib.purs)

Imported Modules: 
------------------------------
  Builtin,
  Lib,
  Prim

Exports: 
------------------------------
  runTest,
  Tuple,
  mappend,
  testInt,
  test/\

Re-Exports: 
------------------------------
  

Foreign: 
------------------------------
  

Datatypes: 
------------------------------
data Tuple (a :: Prim.Type) (b :: Prim.Type) = 
  Tuple ((a :: Prim.Type)) ((b :: Prim.Type))


Declarations: 
------------------------------
testInt :: { runTest :: (Prim.Int -> (Prim.String)) }
testInt = 
  ({ runTest: \(v: Prim.Int) -> ("4": Prim.String) }: {
                                                        runTest :: (Prim.Int ->
                                                        (Prim.String))
                                                      })

runTest :: forall (@a :: Prim.Type). ({ runTest :: ((a :: Prim.Type) -> (Prim.String)) } -> (((a :: Prim.Type) -> (Prim.String))))
runTest = 
  \(dict: {   runTest :: ((a :: Prim.Type) -> (Prim.String)) }) -> 
    (dict: {   runTest :: ((a :: Prim.Type) -> (Prim.String)) })
    .runTest

mappend :: (Prim.String -> ((Prim.String -> (Prim.String))))
mappend = \(v: Prim.String) -> \(v1: Prim.String) -> ("mappend": Prim.String)

test/\ :: forall (a :: Prim.Type) (b :: Prim.Type). ({ runTest :: ((a :: Prim.Type) -> (Prim.String)) } -> (({ runTest :: ((b :: Prim.Type) -> (Prim.String)) } -> ({ runTest :: (((Lib.Tuple ((a :: Prim.Type))) ((b :: Prim.Type))) -> (Prim.String)) }))))
test/\ = 
  \(dictTest: {   runTest :: ((a :: Prim.Type) -> (Prim.String)) }) -> 
    \(dictTest1: {   runTest :: ((b :: Prim.Type) -> (Prim.String)) }) -> 
      ({
         runTest: \(v: ((Lib.Tuple (a*0)) (b*1))) -> 
           case (v: ((Lib.Tuple (a*0)) (b*1))) of 
              Tuple a b -> 
                (mappend: (Prim.String -> ((Prim.String -> (Prim.String)))))
                ((runTest: forall (@a :: Prim.Type). ({
                                                        runTest :: ((a :: Prim.Type) ->
                                                        (Prim.String))
                                                      } ->
                 (((a :: Prim.Type) -> (Prim.String)))))
                 (dictTest: {
                              runTest :: ((a :: Prim.Type) -> (Prim.String))
                            })
                 (a: a*0))
                ((runTest: forall (@a :: Prim.Type). ({
                                                        runTest :: ((a :: Prim.Type) ->
                                                        (Prim.String))
                                                      } ->
                 (((a :: Prim.Type) -> (Prim.String)))))
                 (dictTest1: {
                               runTest :: ((b :: Prim.Type) -> (Prim.String))
                             })
                 (b: b*1))
       }: { runTest :: (((Lib.Tuple (a*0)) (b*1)) -> (Prim.String)) })