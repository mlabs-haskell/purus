MintingPolicy (tests/purus/passing/CoreFn/MintingPolicy/MintingPolicy.purs)

Imported Modules: 
------------------------------
  Builtin,
  MintingPolicy,
  Prim

Exports: 
------------------------------
  guard,
  oneAtATime

Re-Exports: 
------------------------------
  

Foreign: 
------------------------------
  

Datatypes: 
------------------------------



Declarations: 
------------------------------
guard :: (Prim.Boolean -> (Prim.Int))
guard = 
  \(b: Prim.Boolean) -> 
    case (b: Prim.Boolean) of 
       True -> (1: Prim.Int)
       False -> 
         (divideInteger: (Prim.Int -> ((Prim.Int -> (Prim.Int)))))
         (1: Prim.Int)
         (0: Prim.Int)

oneAtATime :: (Builtin.BuiltinData -> ((Builtin.BuiltinData -> ((Builtin.BuiltinData -> (Prim.Int))))))
oneAtATime = 
  \(v: Builtin.BuiltinData) -> 
    \(v1: Builtin.BuiltinData) -> 
      \(cxtData: Builtin.BuiltinData) -> 
        let
          scxt :: Prim.ScriptContext
          scxt = 
            (deserializeScriptContext: (Builtin.BuiltinData ->
            (Prim.ScriptContext)))
            (cxtData: Builtin.BuiltinData)
        in case (scxt: Prim.ScriptContext) of 
              ScriptContext cxt -> 
                case ((cxt: { txInfo :: Prim.TxInfo, purpose :: Prim.ScriptPurpose }).txInfo) of 
                   TxInfo info -> 
                     case ((info: { inputs :: List (Prim.TxInInfo), referenceInputs :: List (Prim.TxInInfo), outputs :: List (Prim.TxOut), fee :: Prim.Value, mint :: Prim.Value, dCert :: List (Prim.DCert), wdrl :: ((Prim.AssocMap (Prim.StakingCredential)) (Prim.Int)), validRange :: (Prim.Interval (Prim.POSIXTime)), signatories :: List (Prim.PubKeyHash), redeemers :: ((Prim.AssocMap (Prim.ScriptPurpose)) (Prim.Redeemer)), data :: ((Prim.AssocMap (Prim.DatumHash)) (Prim.Datum)), id :: Prim.TxId }).mint) of 
                        Value mintMap -> 
                          case (mintMap: ((Prim.AssocMap (Prim.CurrencySymbol)) (((Prim.AssocMap (Prim.TokenName)) (Prim.Int))))) of 
                             AssocMap mintList -> 
                               case (mintList: List (((Prim.Tuple2 (Prim.CurrencySymbol)) (((Prim.AssocMap (Prim.TokenName)) (Prim.Int)))))) of 
                                  Cons valMap xs -> 
                                    case (xs: List (((Prim.Tuple2 (Prim.CurrencySymbol)) (((Prim.AssocMap (Prim.TokenName)) (Prim.Int)))))) of 
                                       Nil -> 
                                         (guard: (Prim.Boolean -> (Prim.Int)))
                                         (False: Prim.Boolean)
                                       _ -> 
                                         (guard: (Prim.Boolean -> (Prim.Int)))
                                         (True: Prim.Boolean)
                                  _ -> 
                                    (guard: (Prim.Boolean -> (Prim.Int)))
                                    (False: Prim.Boolean)