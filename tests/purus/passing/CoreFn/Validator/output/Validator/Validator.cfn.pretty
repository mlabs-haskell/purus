Validator (tests/purus/passing/CoreFn/Validator/Validator.purs)

Imported Modules: 
------------------------------
  Builtin,
  Prim,
  Validator

Exports: 
------------------------------
  equalsPKH,
  validateIfSignedBy,
  validate

Re-Exports: 
------------------------------
  

Foreign: 
------------------------------
  

Datatypes: 
------------------------------



Declarations: 
------------------------------
equalsPKH :: (Prim.PubKeyHash -> ((Prim.PubKeyHash -> (Prim.Boolean))))
equalsPKH = 
  \(v: Prim.PubKeyHash) -> 
    \(v1: Prim.PubKeyHash) -> 
      case (v: Prim.PubKeyHash) (v1: Prim.PubKeyHash) of 
         PubKeyHash bs1 PubKeyHash bs2 -> 
           (equalsByteString: (Builtin.BuiltinByteString ->
           ((Builtin.BuiltinByteString -> (Prim.Boolean)))))
           (bs1: Builtin.BuiltinByteString)
           (bs2: Builtin.BuiltinByteString)

validateIfSignedBy :: (Prim.PubKeyHash -> ((Builtin.BuiltinData -> ((Builtin.BuiltinData -> ((Builtin.BuiltinData -> (Prim.Boolean))))))))
validateIfSignedBy = 
  \(pkh: Prim.PubKeyHash) -> 
    \(v: Builtin.BuiltinData) -> 
      \(v1: Builtin.BuiltinData) -> 
        \(cxtData: Builtin.BuiltinData) -> 
          let
            scxt :: Prim.ScriptContext
            scxt = 
              (deserializeScriptContext: (Builtin.BuiltinData ->
              (Prim.ScriptContext)))
              (cxtData: Builtin.BuiltinData)
          in case (scxt: Prim.ScriptContext) of 
                ScriptContext cxt -> 
                  case ((cxt: { txInfo :: Prim.TxInfo, purpose :: Prim.ScriptPurpose }).txInfo) of 
                     TxInfo info -> 
                       let
                         signatories :: List (Prim.PubKeyHash)
                         signatories = 
                           (info: {
                                    inputs :: List (Prim.TxInInfo),
                                    referenceInputs :: List (Prim.TxInInfo),
                                    outputs :: List (Prim.TxOut),
                                    fee :: Prim.Value,
                                    mint :: Prim.Value,
                                    dCert :: List (Prim.DCert),
                                    wdrl :: ((Prim.AssocMap
                                    (Prim.StakingCredential)) (Prim.Int)),
                                    validRange :: (Prim.Interval
                                    (Prim.POSIXTime)),
                                    signatories :: List (Prim.PubKeyHash),
                                    redeemers :: ((Prim.AssocMap
                                    (Prim.ScriptPurpose)) (Prim.Redeemer)),
                                    data :: ((Prim.AssocMap
                                    (Prim.DatumHash)) (Prim.Datum)),
                                    id :: Prim.TxId
                                  })
                           .signatories
                       in (anyList: forall (a :: Prim.Type). (((a :: Prim.Type) ->
                          (Prim.Boolean)) ->
                          ((List ((a :: Prim.Type)) -> (Prim.Boolean)))))
                          ((equalsPKH: (Prim.PubKeyHash ->
                           ((Prim.PubKeyHash -> (Prim.Boolean)))))
                           (pkh: Prim.PubKeyHash))
                          (signatories: List (Prim.PubKeyHash))

validate :: (((Builtin.BuiltinData -> (Builtin.BuiltinData)) -> (Builtin.BuiltinData)) -> (Prim.Boolean))
validate = 
  let
    pkh :: Prim.PubKeyHash
    pkh = 
      (PubKeyHash: (Builtin.BuiltinByteString -> (Prim.PubKeyHash)))
      ((encodeUtf8: (Prim.String -> (Builtin.BuiltinByteString)))
       ("woop": Prim.String))
  in (validateIfSignedBy: (Prim.PubKeyHash ->
     ((Builtin.BuiltinData ->
     ((Builtin.BuiltinData -> ((Builtin.BuiltinData -> (Prim.Boolean)))))))))
     (pkh: Prim.PubKeyHash)