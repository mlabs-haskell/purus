ForeignKinds.Lib (tests/purus/passing/ForeignKind/Lib.purs)

Imported Modules: 
------------------------------
  Builtin,
  ForeignKinds.Lib,
  Prim

Exports: 
------------------------------
  NatProxy,
  succProxy,
  proxy0,
  proxy1,
  proxy2,
  proxy3,
  addNat,
  addNatZero,
  addNatSuccSucc

Re-Exports: 
------------------------------
  

Foreign: 
------------------------------
  

Datatypes: 
------------------------------
data Nat  = 
  

data NatProxy (t :: ForeignKinds.Lib.Nat) = 
  NatProxy 


Declarations: 
------------------------------
addNatZero :: (Prim.Record ({}@Prim.Type))
addNatZero = ({  }: (Prim.Record ({}@Prim.Type)))

addNatSuccSucc :: forall (l :: ForeignKinds.Lib.Nat) (r :: ForeignKinds.Lib.Nat) (o :: ForeignKinds.Lib.Nat). ((Prim.Record ({})) -> ((((Prim.Record ({})) ((r :: ForeignKinds.Lib.Nat))) ((ForeignKinds.Lib.Succ ((o :: ForeignKinds.Lib.Nat)))))))
addNatSuccSucc = 
  \($__unused: (Prim.Record ({}))) -> ({  }: (Prim.Record ({}@Prim.Type)))

succProxy :: forall (n :: ForeignKinds.Lib.Nat). ((ForeignKinds.Lib.NatProxy ((n :: ForeignKinds.Lib.Nat))) -> ((ForeignKinds.Lib.NatProxy ((ForeignKinds.Lib.Succ ((n :: ForeignKinds.Lib.Nat)))))))
succProxy = 
  \(v: (ForeignKinds.Lib.NatProxy ((n :: ForeignKinds.Lib.Nat)))) -> 
    (NatProxy: (ForeignKinds.Lib.NatProxy
    ((ForeignKinds.Lib.Succ ((n :: ForeignKinds.Lib.Nat))))))

proxy3 :: (ForeignKinds.Lib.NatProxy ((ForeignKinds.Lib.Succ ((ForeignKinds.Lib.Succ ((ForeignKinds.Lib.Succ (ForeignKinds.Lib.Zero))))))))
proxy3 = 
  (NatProxy: (ForeignKinds.Lib.NatProxy
  ((ForeignKinds.Lib.Succ
  ((ForeignKinds.Lib.Succ
  ((ForeignKinds.Lib.Succ (ForeignKinds.Lib.Zero)))))))))

proxy2 :: (ForeignKinds.Lib.NatProxy ((ForeignKinds.Lib.Succ ((ForeignKinds.Lib.Succ (ForeignKinds.Lib.Zero))))))
proxy2 = 
  (NatProxy: (ForeignKinds.Lib.NatProxy
  ((ForeignKinds.Lib.Succ ((ForeignKinds.Lib.Succ (ForeignKinds.Lib.Zero)))))))

proxy1 :: (ForeignKinds.Lib.NatProxy ((ForeignKinds.Lib.Succ (ForeignKinds.Lib.Zero))))
proxy1 = 
  (NatProxy: (ForeignKinds.Lib.NatProxy
  ((ForeignKinds.Lib.Succ (ForeignKinds.Lib.Zero)))))

proxy0 :: (ForeignKinds.Lib.NatProxy (ForeignKinds.Lib.Zero))
proxy0 = (NatProxy: (ForeignKinds.Lib.NatProxy (ForeignKinds.Lib.Zero)))

addNat :: forall (l :: ForeignKinds.Lib.Nat) (r :: ForeignKinds.Lib.Nat) (o :: ForeignKinds.Lib.Nat). ((Prim.Record ({})) -> (((ForeignKinds.Lib.NatProxy ((l :: ForeignKinds.Lib.Nat))) -> (((ForeignKinds.Lib.NatProxy ((r :: ForeignKinds.Lib.Nat))) -> ((ForeignKinds.Lib.NatProxy ((o :: ForeignKinds.Lib.Nat)))))))))
addNat = 
  \($__unused: (Prim.Record ({}))) -> 
    \(v: (ForeignKinds.Lib.NatProxy ((l :: ForeignKinds.Lib.Nat)))) -> 
      \(v1: (ForeignKinds.Lib.NatProxy ((r :: ForeignKinds.Lib.Nat)))) -> 
        (NatProxy: (ForeignKinds.Lib.NatProxy ((o :: ForeignKinds.Lib.Nat))))