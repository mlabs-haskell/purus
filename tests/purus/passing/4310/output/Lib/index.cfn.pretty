Lib (tests/purus/passing/4310/Lib.purs)
Imported Modules: 
  Builtin,
  Lib,
  Prim
Exports: 
  runTest,
  Tuple,
  mappend,
  testInt,
  test/\
Re-Exports: 
  
Foreign: 
  
Declarations: 
Tuple :: forall (@a :: Type) (@b :: Type). a -> b -> (Tuple a b)
Tuple = Tuple

Test$Dict :: forall a. { runTest :: a -> String } -> { runTest :: a -> String }
Test$Dict = \(x: { runTest :: a -> String }) -> (x: { runTest :: a -> String })

testInt :: Test$Dict Int
testInt = 
  (Test$Dict: {   runTest :: Int -> String } -> Test$Dict Int)
  ({ runTest: \(v: Int) -> ("4": String) }: { runTest :: Int -> String })

runTest :: forall (@a :: Type). Test$Dict a -> a -> String
runTest = 
  \(dict: Test$Dict a) -> 
    case (dict: Test$Dict a) of 
       Test$Dict v -> (v: { runTest :: a -> String }).runTest

mappend :: String -> String -> String
mappend = \(v: String) -> \(v1: String) -> ("mappend": String)

test/\ :: forall (a :: Type) (b :: Type). Test$Dict a -> Test$Dict b -> Test$Dict (Tuple a b)
test/\ = 
  \(dictTest: Test$Dict a) -> 
    \(dictTest1: Test$Dict b) -> 
      (Test$Dict: {   runTest :: (Tuple a b) -> String } ->
      Test$Dict (Tuple a b))
      ({
         runTest: \(v: (Tuple a b)) -> 
           case (v: (Tuple a b)) of 
              Tuple a b -> 
                (mappend: String -> String -> String)
                ((runTest: forall (@a :: Type). Test$Dict a -> a -> String)
                 (dictTest: Test$Dict a)
                 (a: a))
                ((runTest: forall (@a :: Type). Test$Dict a -> a -> String)
                 (dictTest1: Test$Dict b)
                 (b: b))
       }: { runTest :: (Tuple a b) -> String })